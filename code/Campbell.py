""" 
Script to post-process several linearization files generated by different OpenFAST simulations.

Each OpenFAST simulation is considered to be at a different operating point (OP).
Typically, this is run for several wind speed/RPM.

A Campbell diagram is plotted, showing the frequencies and damping of each modes for each operating point.

An attempt to identify the turbine modes is done by the script, but a manual sorting is usually needed.
This is done by opening the csv file generated (Campbell_ModesID.csv), and changing the indices. 

The "plot call" at the end of the script can then be repeated with the updated csv file.


"""
import os
import glob
import numpy as np
import matplotlib.pyplot as plt
import pyFAST.linearization.campbell as lin

MyDir = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))

# Script Parameters
BladeLen     = 117.
TowerLen     = 144.386 
folder_name = 'outputs_iea15/stability_iea15_a_towdt_ctrl_ua_rpm_BD'

fstFiles = glob.glob(folder_name + '/*.fst') # list of fst files where linearization were run, lin file will be looked for
fig_name = folder_name + '/Campbell'
fstFiles.sort() # not necessary

try:
    # Edit the mode ID file manually to better identify/distribute the modes
    modeID_file = folder_name + '/Campbell_ModesID.csv'
    fig, axes, figName =  lin.plotCampbellDataFile(modeID_file, 'ws', ylim=None, to_csv=True)
except:
    # Find lin files, perform MBC, and try to identify modes. A csv file is written with the mode IDs.
    freqRange=[0.3,5]

    posDampRange=[0, 0.9]

    # removeStatesPattern=r'^AD'

    OP, Freq, Damp, UnMapped, ModeData, modeID_file = lin.postproCampbell(fstFiles, BladeLen, 
                                                                        TowerLen, nFreqOut=5000, 
                                                                        freqRange = freqRange, 
                                                                        posDampRange = posDampRange)#,
                                                                        # removeStatesPattern = removeStatesPattern)
    fig, axes, figName =  lin.plotCampbellDataFile(modeID_file, 'ws', ylim=None, to_csv=True)


axes[0].set_ylim([0.,5.])
axes[0].set_xlim([0, 26])
axes[1].set_ylim([-0.1, 1.])
axes[1].set_xlim([0, 26])
plt.tight_layout()
fig.savefig(fig_name + '.png')
fig.savefig(fig_name + '.pdf')

if __name__=='__main__':
    plt.show()

